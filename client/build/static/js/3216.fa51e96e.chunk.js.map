{"version":3,"file":"static/js/3216.fa51e96e.chunk.js","mappings":"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","sources":["Alerts/Error.jsx","Alerts/Loader.js","action/orderAction.js","components/Users/UserOrders.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Error = ({ error }) => {\r\n  return (\r\n    <div className=\"bg-red-100 border border-red-500 text-red-700 px-4 py-3 rounded relative\">\r\n      <span className=\"block sm:inline\">{error}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"flex items-center justify-center\">\r\n      <div className=\"border-t-4 border-b-4 border-blue-500 rounded-full w-12 h-12 animate-spin\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import axios from \"axios\";\r\n\r\nexport const placeOrder = (token, subTotal) => async (dispatch, getState) => {\r\n  dispatch({ type: \"PLACE_ORDER_REQUEST\" });\r\n  const currentUser = getState().loginUserReducer.currentUser;\r\n  const cartItems = getState().cartReducer.cartItems;\r\n  try {\r\n    await axios.post(\"/api/orders/placeorder\", {\r\n      token,\r\n      subTotal,\r\n      currentUser,\r\n      cartItems,\r\n    });\r\n    dispatch({ type: \"PLACE_ORDER_SUCCESS\" });\r\n    // console.log(res);\r\n  } catch (error) {\r\n    dispatch({ type: \"PLACE_ORDER_FAIL\" });\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getUserOrders = () => async (dispatch, getState) => {\r\n  const currentUser = getState().loginUserReducer.currentUser;\r\n  dispatch({\r\n    type: \"USER_ORDER_REQUEST\",\r\n  });\r\n  try {\r\n    const response = await axios.post(\"/api/orders/getuserorder\", {\r\n      email: currentUser.email,\r\n    });\r\n    // console.log(response);\r\n    dispatch({ type: \"USER_ORDER_SUCCESS\", payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: \"USER_ORDER_FAIL\", payload: error });\r\n  }\r\n};\r\nexport const getAllOrders = () => async (dispatch, getState) => {\r\n  // const currentUser = getState().loginUserReducer.currentUser;\r\n  dispatch({\r\n    type: \"ALL_ORDER_REQUEST\",\r\n  });\r\n  try {\r\n    const response = await axios.get(\"/api/orders/alluserorder\");\r\n    dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\r\n  } catch (error) {\r\n    dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\r\n  }\r\n};\r\n\r\nexport const deliverOrder = (orderid) => async (dispatch, getState) => {\r\n  // const currentUser = getState().loginUserReducer.currentUser;\r\n  dispatch({\r\n    type: \"GET_ALL_ORDER_REQUEST\",\r\n  });\r\n  try {\r\n    await axios.post(\"/api/orders/deliverorder\", { orderid });\r\n    // alert(\"Deliverd Success\");\r\n    const orders = await axios.get(\"/api/orders/alluserorder\");\r\n    dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\r\n    window.location.href = \"/admin/orderlist\";\r\n  } catch (error) {\r\n    dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\r\n  }\r\n};\r\n\r\n\r\nexport const cancelOrder = (orderid) => async (dispatch, getState) => {\r\n  // const currentUser = getState().loginUserReducer.currentUser;\r\n  dispatch({\r\n    type: \"GET_ALL_ORDER_REQUEST\",\r\n  });\r\n  try {\r\n    await axios.post(\"/api/orders/canceOrder\", { orderid });\r\n    // alert(\"Deliverd Success\");\r\n    const orders = await axios.get(\"/api/orders/alluserorder\");\r\n    dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\r\n    window.location.href = \"/admin/orderlist\";\r\n  } catch (error) {\r\n    dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\r\n  }\r\n};\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { getUserOrders } from \"../../action/orderAction\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loader from \"../../Alerts/Loader\";\r\nimport Error from \"../../Alerts/Error\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst UserOrder = () => {\r\n  const orderState = useSelector((state) => state.getUserOrdersReducer);\r\n  const { loading, error, orders } = orderState;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserOrders());\r\n  }, [dispatch]);\r\n\r\n  const getStatusClasses = (isDelivered, isCanceled) => {\r\n    if (isCanceled) {\r\n      return \"bg-red-500 text-white font-bold\";\r\n    } else if (isDelivered) {\r\n      return \"bg-green-500 text-white font-bold\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const formattedDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n    return formattedDate;\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen\">\r\n      <h1 className=\"text-center text-3xl font-bold mb-8\">Your Orders</h1>\r\n\r\n      {loading && <Loader />}\r\n      {error && <Error error=\"Something went wrong.\" />}\r\n\r\n      {orders &&\r\n        orders.map((order) => (\r\n          <div key={order._id} className=\"container border p-4 bg-white shadow mb-8\">\r\n            <div  className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n              <div>\r\n                <h4 className=\"font-semibold\">Items:</h4>\r\n                {order.orderItems.map((item) => (\r\n                  <p key={item.name} className=\"mb-2\">\r\n                    {item.name} [{item.variant}] * {item.quantity} = {item.price}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n\r\n              <div>\r\n                <h4 className=\"font-semibold\">Address:</h4>\r\n                {/* <p className=\"mb-2\">Street: {order.shippingAddress.street}</p> */}\r\n                <p className=\"mb-2\">City: {order.shippingAddress.city}</p>\r\n                <p className=\"mb-2\">PinCode: {order.shippingAddress.pinCode}</p>\r\n                <p>Country: {order.shippingAddress.country}</p>\r\n              </div>\r\n\r\n              <div>\r\n                <h4 className=\"font-semibold\">Order Info:</h4>\r\n                <p className=\"mb-2\">Order Amount: {order.orderAmount}</p>\r\n                <p className=\"mb-2 text-gray-500\">Order Date: {formatDate(order.createdAt)}</p>\r\n                <p className=\"mb-2\">Transaction ID: {order.transactionId}</p>\r\n                <p>Order ID: {order._id}</p>\r\n                {order.isCanceled && (\r\n                  <p className={`py-2 rounded ${getStatusClasses(false, order.isCanceled)}`}>\r\n                    Order Status: Cancelled\r\n                  </p>\r\n                )}\r\n                {!order.isCanceled && (\r\n                  <p className={`py-2 rounded ${getStatusClasses(order.isDelivered, false)}`}>\r\n                    Order Status: {order.isDelivered ? \"Delivered\" : \"Not Delivered\"}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserOrder;\r\n"],"names":["error","className","getUserOrders","dispatch","getState","currentUser","loginUserReducer","type","axios","email","response","payload","data","getAllOrders","deliverOrder","orderid","orders","window","location","href","cancelOrder","orderState","useSelector","state","getUserOrdersReducer","loading","useDispatch","useEffect","getStatusClasses","isDelivered","isCanceled","formatDate","dateString","date","Date","getDate","getMonth","getFullYear","map","order","orderItems","item","name","variant","quantity","price","shippingAddress","city","pinCode","country","orderAmount","createdAt","transactionId","_id"],"sourceRoot":""}